// This file was generated by Prisma 4.18.0
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// This is your Prisma schema file.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  stripeCustomerId String? @unique

  userType           UserType?
  onboardingComplete Boolean   @default(false)

  company   Company?
  JobSeeker JobSeeker?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SavedJob SavedJob[]
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id String @id @default(cuid())

  name     String
  location String
  about    String
  website  String
  logo     String
  xAccount String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  jobs   Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id String @id @default(cuid())

  name   String
  about  String
  resume String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Job {
  id String @id @default(cuid())

  jobTitle        String
  jobDescription  String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  listingDuration Int
  benefits        String[]

  status JobStatus @default(DRAFT)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  savedJobs SavedJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJob {
  id String @id @default(cuid())

  jobId String
  userId String

  job Job @relation(fields: [jobId], references: [id])
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, userId])
}
